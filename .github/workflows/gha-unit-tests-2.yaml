## Matrix strategy test for unit testing
name: GHA Unit Tests 2

on:
  # pull_request:
  #   branches: [ main ]
  push:
    branches: [ gha-testing ]

jobs:
  install-all-java:
    runs-on: ubuntu-latest
    # strategy:
    #   ##max-parallel: 1 ## used to force sequential
    #   fail-fast: false
    #   matrix:
    #     java-version: [8, 9, 10, 11, 12, 13, 14, 15] ## caching won't work with matrix, break this out into individual installs
    steps:
      - uses: actions/checkout@v2

      # Install 8
      - name: Set up Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8

      # Install 9
      - name: Set up Java 9
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 9

      # Install 10
      - name: Set up Java 10
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 10

      # Install 11
      - name: Set up Java 11
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      # Install 12
      - name: Set up Java 12
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 12

      # Install 13
      - name: Set up Java 13
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 13

      # Install 14
      - name: Set up Java 14
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 14

      # Install 15
      - name: Set up Java 15
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 15

      - name: Cache jdk dir
        uses: actions/cache@v2
        env:
          cache-name: cache-jdk-dir ## See if this works and includes all versions
        with:
          path: /opt/hostedtoolcache/jdk/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*') }} ## Explore extensions to cache if no lock file
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Check contents of cache path
      - name: check cache dir
        run: |
          ls -la /opt/hostedtoolcache/jdk/

      # Create env variables for the jdks
      - name: Create env variables for the jdks
        run: |
          touch jdk_paths.txt
          ls -1v /opt/hostedtoolcache/jdk/ > jdk_paths.txt
          cat jdk_paths.txt
          JAVA_VERSION=8
          while read line
          do
              echo $line
              echo The counter is $COUNTER
              echo "ORG_GRADLE_PROJECT_jdk$JAVA_VERSION=/opt/hostedtoolcache/jdk/$line/x64" >> $GITHUB_ENV
              # Below only use for subsequent jobs, as the jdk build doesn't set these paths
              # echo "/opt/hostedtoolcache/jdk/$line/x64/bin" >> $GITHUB_PATH
              let JAVA_VERSION=JAVA_VERSION+1 
          done < jdk_paths.txt

      # Check ENV variables
      - name: Check environmental variables
        run: printenv

      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
          whereis java #determine dir to cache

  ###

  matrix_unit_test:  ## Determine the module dependencies, why are we seeing errors for version not tested?
    timeout-minutes: 120
    needs: install-all-java
    runs-on: ubuntu-latest
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        java-version: [8, 9, 10, 11, 12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1


      ## restore jdk cache dir here

      - name: Cache jdk dir
        uses: actions/cache@v2
        env:
          cache-name: cache-jdk-dir ## See if this works and includes all versions
        with:
          path: /opt/hostedtoolcache/jdk/
          key: ${{ runner.os }}-build-${{ hashFiles('**/*') }} ## removing matrix variable to test if all will be restored.
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Check contents of cache path
      - name: check cache dir
        run: ls /opt/hostedtoolcache/jdk/

      # Create env variables for the jdks - perhaps move to shell script or custom action
      - name: Create env variables for the jdks
        run: |
          touch jdk_paths.txt
          ls -1v /opt/hostedtoolcache/jdk/ > jdk_paths.txt
          cat jdk_paths.txt
          # Below is a counter, not java "8"
          JAVA_VERSION=8
          while read line
          do
              echo $line
              echo The counter is $COUNTER
              echo "ORG_GRADLE_PROJECT_jdk$JAVA_VERSION=/opt/hostedtoolcache/jdk/$line/x64" >> $GITHUB_ENV
              # Below only use for subsequent jobs, as the jdk build doesn't set these paths
              echo "/opt/hostedtoolcache/jdk/$line/x64/bin" >> $GITHUB_PATH
              let JAVA_VERSION=JAVA_VERSION+1 
          done < jdk_paths.txt

      # Check ENV variables
      - name: Check environmental variables
        run: printenv

      # install of matrix Java versions
      - name: Set up Java ${{ matrix.java-version }}
        uses: actions/setup-java@v1.4.3
        with:
          java-version: ${{ matrix.java-version }}

      # Set current default jdk version
      - name: save JAVA_HOME as JDK${{ matrix.java-version }} for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}=$JAVA_HOME" >> $GITHUB_ENV

      # Check $JAVA_HOME - This should be equal to the version of the matrix run
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
          whereis java #determine dir to cache

      ## Custom Cache Test
      - name: Touch a file and save to a cache directory
        run: |
          mkdir test-cache-dir
          touch test-cache-dir/ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}.txt
          ls -la
          cd test-cache-dir
          ls -la
          cd ../

      - name: Cache test directory
        uses: actions/cache@v2
        env:
          cache-name: cache-test-dir
        with:
          path: test-cache-dir
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.txt') }} ## Explore extensions to cache if no lock file
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle

      # GHA run unit tests
      # Run the build.
      - name: Run unit tests for each Java version as defined in the matrix
        run: |
          # Changed log level to --warn from --info
          ./gradlew --console=plain --parallel clean test -x functional_test:test -PnoInstrumentation -Ptest${{ matrix.java-version }} --continue --warn

      # Run the build.
      - name: Run the tests with alternate Java version syntax - testing with -Dorg.gradle.java.home
        run: |
          ##./gradlew -Dorg.gradle.java.home=${ORG_GRADLE_PROJECT_jdk9} --console=plain --parallel functional_test:test -PnoInstrumentation --continue --info


      # Capture HTML build result in artifacts
      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-results-java-${{ matrix.java-version }}
          path: |
            agent*/build/reports/tests/* 
            # path/output/test-results
            # !path/**/*.tmp



  testing_job_dependence: ## Testing Only
    needs: matrix_unit_test
    runs-on: ubuntu-latest
    steps:        
      # Print Environmental variables 
      - name: Print Environmental variables (verify activate has been sourced)
        run: |
          printenv    

      - name: Cache test directory
        uses: actions/cache@v2
        env:
          cache-name: cache-test-dir
        with:
          path: test-cache-dir
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      ## List cached items
      - name: List items in testing cached directory
        run: |
          cd test-cache-dir
          ls -la
          cd ../

      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Check that all the Java versions are installed
        run: |
          pwd
          ls -la 
          whereis java
