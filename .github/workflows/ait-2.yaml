## Still need to configure AIT dependencies
## Testing the with the AIT workspace content in a test branch
name: GHA Migration - AIT 2

on:
  # pull_request:
  #   branches: [ main ]
  push:
    branches: [ gha-testing ]

jobs:
  install-all-java:
    runs-on: ubuntu-latest
    # strategy:
    #   ##max-parallel: 1 ## used to force sequential
    #   fail-fast: false
    #   matrix:
    #     java-version: [8, 9, 10, 11, 12, 13, 14, 15] ## caching won't work with matrix, break this out into individual installs
    steps:
      - uses: actions/checkout@v2

      # Install 8
      - name: Set up Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8

      # Install 9
      - name: Set up Java 9
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 9

      # Install 10
      - name: Set up Java 10
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 10

      # Install 11
      - name: Set up Java 11
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      # Install 12
      - name: Set up Java 12
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 12

      # Install 13
      - name: Set up Java 13
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 13

      # Install 14
      - name: Set up Java 14
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 14

      # Install 15
      - name: Set up Java 15
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 15

      - name: Cache jdk dir
        uses: actions/cache@v2
        env:
          cache-name: cache-jdk-dir ## See if this works and includes all versions
        with:
          path: /opt/hostedtoolcache/jdk/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*') }} ## Explore extensions to cache if no lock file
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Check contents of cache path
      - name: check cache dir
        run: |
          ls -la /opt/hostedtoolcache/jdk/

      # Create env variables for the jdks
      - name: Create env variables for the jdks
        run: |
          touch jdk_paths.txt
          ls -1v /opt/hostedtoolcache/jdk/ > jdk_paths.txt
          cat jdk_paths.txt
          JAVA_VERSION=8
          while read line
          do
              echo $line
              echo The counter is $COUNTER
              echo "ORG_GRADLE_PROJECT_jdk$JAVA_VERSION=/opt/hostedtoolcache/jdk/$line/x64" >> $GITHUB_ENV
              # Below only use for subsequent jobs, as the jdk build doesn't set these paths
              # echo "/opt/hostedtoolcache/jdk/$line/x64/bin" >> $GITHUB_PATH
              let JAVA_VERSION=JAVA_VERSION+1 
          done < jdk_paths.txt

      # Check ENV variables
      - name: Check environmental variables
        run: printenv

      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
          whereis java #determine dir to cache

  ###

  AIT:
    needs: install-all-java
    timeout-minutes: 120
    runs-on: ubuntu-latest
    # strategy:
    #   ##max-parallel: 1 ## used to force sequential
    #   fail-fast: false
    #   matrix:
    #     java-version: [8, 9, 10, 11, 12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2

      - name: Checkout AIT repo test
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-agent-integration-tests
          ref: testing
          token: ${{ secrets.AITPAT }}
          path: ait 

      - name: Checkout AIT Jenkins workspace repository
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-workspace
          ref: main
          token: ${{ secrets.AITPAT }}
          path: ait-workspace     

      # Check for GH CLI
      - name: GitHub CLI installed?
        run: |
          gh --version 

      # Print Environmental variables
      - name: Print Environmental variablescd contents
        run: |
          printenv | sort -f

      # Validate repo
      - name: Validate AIT repo
        run: |
          ls -la 
          cd ait
          git status -sb 
          ls -la 

      # Validate repo
      - name: Validate AIT Workspace repo
        run: |
          ls -la 
          cd ait-workspace 
          git status -sb 
          ls -la 
          echo "check contents of conf and bin directories"
          ls -la bin/
          echo "and conf..."
          ls -la conf/
          cd ../

      - name: Checkout Cache 1
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-1
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache1 
          lfs: true

      # Validate repo
      - name: Validate cache 1
        run: |
          ls -la 
          cd appcache1 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 2
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-2
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache2
          lfs: true

      # Validate repo
      - name: Validate cache 2
        run: |
          ls -la 
          cd appcache2 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 3
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-3
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache3 
          lfs: true

      # Validate repo
      - name: Validate cache 3
        run: |
          ls -la 
          cd appcache3 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 4
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-4
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache4 
          lfs: true

      # Validate repo
      - name: Validate cache 4
        run: |
          ls -la 
          cd appcache4 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      # Consolidate caches into one directory
      - name: Consolidate caches
        run: |
          ls -la 
          mkdir apps
          mv appcache1/* apps/
          mv appcache2/* apps/
          mv appcache3/* apps/
          mv appcache4/* apps/
          cd apps
          ls -la 
          cd ../ 

      ## restore jdk cache dir here

      - name: Cache jdk dir
        uses: actions/cache@v2
        env:
          cache-name: cache-jdk-dir ## See if this works and includes all versions
        with:
          path: /opt/hostedtoolcache/jdk/
          key: ${{ runner.os }}-build-${{ hashFiles('**/*') }} ## removing matrix variable to test if all will be restored.
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Check contents of cache path
      - name: check cache dir
        run: ls /opt/hostedtoolcache/jdk/

      # Create env variables for the jdks - perhaps move to shell script or custom action
      - name: Create env variables for the jdks
        run: |
          touch jdk_paths.txt
          ls -1v /opt/hostedtoolcache/jdk/ > jdk_paths.txt
          cat jdk_paths.txt
          # Below is a counter, not java "8"
          JAVA_VERSION=8
          while read line
          do
              echo $line
              echo The counter is $COUNTER
              echo "ORG_GRADLE_PROJECT_jdk$JAVA_VERSION=/opt/hostedtoolcache/jdk/$line/x64" >> $GITHUB_ENV
              # Below only use for subsequent jobs, as the jdk build doesn't set these paths
              echo "/opt/hostedtoolcache/jdk/$line/x64/bin" >> $GITHUB_PATH
              let JAVA_VERSION=JAVA_VERSION+1 
          done < jdk_paths.txt

      # Check ENV variables
      - name: Check environmental variables
        run: printenv

      # End Java restore section

      ## TESTING SECTION

      - name: OS and IP check
        run: |
          ./.github/scripts/identify-os.sh

      # Source "activate"
      ## Determine if this is even necessary?
      - name: Activate environment (testing script from workflow - temp)
        run: |
          echo "source activate"
          # source ait-workspace/bin/activate-gha
          # ### Start of activate scripts - is source command working?
          # # unset irrelevant variables
          # # GHA - don't believe this is required:
          # # deactivate nondestructive

          # # VIRTUAL_ENV="ait-workspace"
          # # export VIRTUAL_ENV
          # # export to GHA env 
          echo "VIRTUAL_ENV=${HOME}/ait-workspace" >> $GITHUB_ENV
          ls -la $(echo ${VIRTUAL_ENV})

          # # _OLD_VIRTUAL_PATH="$PATH"
          # # PATH="$VIRTUAL_ENV/bin:$PATH"
          # # export PATH
          # # export to GHA PATH - this may need to be updated in a subsequent step.
          # NOTE ENV VARIABLES DECLARED IN A STEP CANNOT BE REFERENCED IN THE SAME STEP (as done above)
          echo "${HOME}/ait-workspace/bin" >> $GITHUB_PATH

          # GHA - PYTHONHOME not set, omit this if?
          # unset PYTHONHOME if set (GHA - should not be set)
          # if ! [ -z "${PYTHONHOME+_}" ] ; then
          #     _OLD_VIRTUAL_PYTHONHOME="$PYTHONHOME"
          #     unset PYTHONHOME
          # fi

          # commenting for now
          if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT-}" ] ; then
              _OLD_VIRTUAL_PS1="$PS1"
              if [ "x" != x ] ; then
                  PS1="$PS1"
              else
                  PS1="(`basename \"$VIRTUAL_ENV\"`) $PS1"
              fi
              # GHA - export PS1
              # export PS1
              echo "PS1=${PS1}" >> $GITHUB_ENV
          fi

          # # Make sure to unalias pydoc if it's already there
          alias pydoc 2>/dev/null >/dev/null && unalias pydoc

          pydoc () {
              python -m pydoc "$@"
          }

          # # This should detect bash and zsh, which have a hash command that must
          # # be called to get it to forget past commands.  Without forgetting
          # # past commands the $PATH changes we made may not be respected
          # # GHA - necessary?
          if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
              hash -r 2>/dev/null
          fi
          # ### End of activate script

      ## run to check for errors
      # Adding build job and cacahe restore as in other test workflows
      # Check Java
      - name: Check java install and version
        env:
          JAVA_HOME: /opt/hostedtoolcache/jdk/15.0.3/x64
        run: |
          echo "Java version is: " $(Java -version)

      ## run to check for errors
      # Build agent jar test in ait-workspace
      - name: build agent jar
        run: |
          # cd ait-workspace # No, as gradlew does not exist in this repo.
          echo "building agent jar"
          # ./gradlew jar

      ## CUSTOM ACTION FOR AITs
      # Still need to copy all of the repos into the New Relic Org.
      # Checkout the private actions repo and then call the action
      - name: Get private repo with AIT action
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-actions
          ref: main
          token: ${{ secrets.ACTIONS_TOKEN }}
          path: java-actions

      # Verify java-actions directory
      - name: Verify java-actions directory
        run: |
          ls -la java-actions/
          ls -la java-actions/.github/actions/composite/ 

      # Call the action with required input values (if applicable)
      # Shell scripts from jenkins job will be called from this action.yaml
      # - name: Run the AIT testing action
      #   uses: java-actions/.github/actions/composite/ait 
        # with:
        #   second_input_id: 'remote -v' # This value is passed as an input to the associated shell script called from the actions.yaml.


      # Activate environment and run AITs
      - name: Activate environment and run AITs
        run: |
          echo "Activate environment and run AITs"
          # . bin/activate
          # source conf/testenv java ## This may not work.  variables will have to be added to step. 
          # conf/validate

      # Print Environmental variables 
      - name: Print Environmental variables (verify activate has been sourced)
        run: |
          printenv |  sort -f

      # Print exported Environmental variables 
      - name: Print exported Environmental variables (verify activate has been sourced)
        run: |
          env |  sort -f

      
      ## Need to set env variable per step (grab exported variables from scripts)
      ## Files referenced from runtests-gha-sh:
      ## conf/validate, use conf/validate-gha
      ## Check for all variable assignment in script.

      # Run tests
      - name: Run a single test from ait-workspace
        run: |
          echo "running tests"
          cd ait-workspace
          echo "content of the ait-workspace:"
          ls -la bin/
          echo "review the current runtest-gha.sh"
          cat bin/runtest-gha.sh 
          whoami
          # TEST_LOG_LEVEL=DEBUG ./bin/runtest-gha.sh tests/java/functionality/server/websphere.py WebSphereTest.test_async 

   # Select branch in workspace (JavaAgentBranch is arbitrary, could be anything in workspace/…), check out your branch, build agent jar:
   # cd workspace/JavaAgentBranch
   # git checkout $BRANCH
   # ./gradlew jar
   # Activate environment and run AITs as described in above section
   # . bin/activate
   # source conf/testenv java
   # conf/validate
   # TEST_LOG_LEVEL=DEBUG ./bin/runtest.sh tests/java/functionality/server/websphere.py WebSphereTest.test_async



