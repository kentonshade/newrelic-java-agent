## Still need to configure AIT dependencies
## Testing the with the AIT workspace content in a test branch
name: GHA Migration - AIT 2

on:
  # pull_request:
  #   branches: [ main ]
  push:
    branches: [ gha-testing ]

jobs:
  AIT:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    # strategy:
    #   ##max-parallel: 1 ## used to force sequential
    #   fail-fast: false
    #   matrix:
    #     java-version: [8, 9, 10, 11, 12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2

      - name: Checkout AIT repo test
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-agent-integration-tests
          ref: testing
          token: ${{ secrets.AITPAT }}
          path: ait 

      - name: Checkout AIT Jenkins workspace repository
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-workspace
          ref: main
          token: ${{ secrets.AITPAT }}
          path: ait-workspace     

      # Check for GH CLI
      - name: GitHub CLI installed?
        run: |
          gh --version 

      # Print Environmental variables
      - name: Print Environmental variables
        run: |
          printenv

      # Validate repo
      - name: Validate AIT repo
        run: |
          ls -la 
          cd ait
          git status -sb 
          ls -la 
          cd ../

      - name: Checkout Cache 1
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-1
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache1 
          lfs: true

      # Validate repo
      - name: Validate cache 1
        run: |
          ls -la 
          cd appcache1 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 2
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-2
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache2
          lfs: true

      # Validate repo
      - name: Validate cache 2
        run: |
          ls -la 
          cd appcache2 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 3
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-3
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache3 
          lfs: true

      # Validate repo
      - name: Validate cache 3
        run: |
          ls -la 
          cd appcache3 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      - name: Checkout Cache 4
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-ait-cache-4
          ref: main
          token: ${{ secrets.AITPAT }}
          path: appcache4 
          lfs: true

      # Validate repo
      - name: Validate cache 4
        run: |
          ls -la 
          cd appcache4 
          git status -sb
          git remote -v
          ls -la 
          cd ../ 

      # Consolidate caches into one directory
      - name: Consolidate caches
        run: |
          ls -la 
          mkdir apps
          mv appcache1/* apps/
          mv appcache2/* apps/
          mv appcache3/* apps/
          mv appcache4/* apps/
          cd apps
          ls -la 
          cd ../ 

      ## TESTING SECTION

      - name: OS and IP check
        run: |
          ./.github/scripts/identify-os.sh

      # Source "activate"
      - name: Activate environment
        run: |
          echo "source activate"
          whereis source 
          source ait-workspace/bin/activate

      # Print Environmental variables 
      - name: Print Environmental variables (verify activate has been sourced)
        run: |
          printenv

      # Build agent jar
      - name: build agent jar
        run: |
          echo "building agent jar"
          # ./gradlew jar

      ## CUSTOM ACTION FOR AITs
      # Still need to copy all of the repos into the New Relic Org.
      # Checkout the private actions repo and then call the action
      - name: Get private repo with AIT action
        uses: actions/checkout@v2
        with:
          repository: kentonshade/java-actions
          ref: main
          token: ${{ secrets.ACTIONS_TOKEN }}
          path: java-actions

      # Verify java-actions directory
      - name: Verify java-actions directory
        run: |
          ls -la java-actions/
          ls -la java-actions/.github/actions/composite/ 

      # Call the action with required input values (if applicable)
      # Shell scripts from jenkins job will be called from this action.yaml
      # - name: Run the AIT testing action
      #   uses: java-actions/.github/actions/composite/ait 
        # with:
        #   second_input_id: 'remote -v' # This value is passed as an input to the associated shell script called from the actions.yaml.


      # Activate environment and run AITs
      - name: Activate environment and run AITs
        run: |
          echo "Activate environment and run AITs"
          # . bin/activate
          # source conf/testenv java ## This may not work.  variables will have to be added to step. 
          # conf/validate

      # Run tests
      - name: Run a single test from ait-workspace
        run: |
          echo "running tests"
          cd ait-workspace
          echo "content of the ait-workspace:"
          ls -la bin/
          echo "review the current runtest-gha.sh"
          cat runtest-gha.sh 
          # TEST_LOG_LEVEL=DEBUG ./bin/runtest.sh tests/java/functionality/server/websphere.py WebSphereTest.test_async 

   # Select branch in workspace (JavaAgentBranch is arbitrary, could be anything in workspace/â€¦), check out your branch, build agent jar:
   # cd workspace/JavaAgentBranch
   # git checkout $BRANCH
   # ./gradlew jar
   # Activate environment and run AITs as described in above section
   # . bin/activate
   # source conf/testenv java
   # conf/validate
   # TEST_LOG_LEVEL=DEBUG ./bin/runtest.sh tests/java/functionality/server/websphere.py WebSphereTest.test_async



